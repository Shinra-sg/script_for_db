#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –±–∞–∑—ã –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª
–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
"""

import sqlite3
import pandas as pd
import os
from datetime import datetime

def export_all_tables_to_excel(output_file=None):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ Excel —Ñ–∞–π–ª"""
    if output_file is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"all_pricelists_export_{timestamp}.xlsx"
    
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ñ–∞–π–ª: {output_file}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = sqlite3.connect('unified_pricelists.db')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏
        cursor = conn.cursor()
        cursor.execute("""
            SELECT table_name, source_file, source_sheet, row_count, column_count
            FROM pricelists_metadata 
            ORDER BY row_count DESC
        """)
        
        tables_info = cursor.fetchall()
        
        if not tables_info:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_info)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
        print("üíæ –ó–∞–ø–∏—Å—å –≤ Excel —Ñ–∞–π–ª...")
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            
            # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_data = []
            for table_name, source_file, sheet, rows, cols in tables_info:
                stats_data.append({
                    '–¢–∞–±–ª–∏—Ü–∞': table_name,
                    '–§–∞–π–ª': source_file,
                    '–õ–∏—Å—Ç': sheet,
                    '–°—Ç—Ä–æ–∫': rows,
                    '–°—Ç–æ–ª–±—Ü–æ–≤': cols
                })
            
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            print(f"  üìä –õ–∏—Å—Ç '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' —Å–æ–∑–¥–∞–Ω")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç
            for table_name, source_file, sheet, rows, cols in tables_info:
                try:
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                    query = f"SELECT * FROM {table_name}"
                    df = pd.read_sql_query(query, conn)
                    
                    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ª–∏—Å—Ç–∞ (Excel –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
                    safe_sheet_name = f"{table_name[:30]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
                    df.to_excel(writer, sheet_name=safe_sheet_name, index=False)
                    print(f"  üìã –õ–∏—Å—Ç '{safe_sheet_name}' —Å–æ–∑–¥–∞–Ω ({rows:,} —Å—Ç—Ä–æ–∫)")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                    continue
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        import os
        file_size = os.path.getsize(output_file)
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} MB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()
    
    return True

def export_specific_table(table_name, output_file=None):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    if output_file is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_name = table_name.replace(' ', '_').replace('-', '_')
        output_file = f"{safe_name}_export_{timestamp}.xlsx"
    
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã {table_name} –≤: {output_file}")
    
    try:
        conn = sqlite3.connect('unified_pricelists.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", [table_name])
        
        if not cursor.fetchone():
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        row_count = cursor.fetchone()[0]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {row_count:,}")
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        query = f"SELECT * FROM {table_name}"
        df = pd.read_sql_query(query, conn)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        df.to_excel(output_file, index=False, sheet_name='–î–∞–Ω–Ω—ã–µ')
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        import os
        file_size = os.path.getsize(output_file)
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} MB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()
    
    return True

def export_by_source(source_file, output_file=None):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º"""
    if output_file is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_name = source_file.replace(' ', '_').replace('.', '_')
        output_file = f"{safe_name}_export_{timestamp}.xlsx"
    
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ {source_file} –≤: {output_file}")
    
    try:
        conn = sqlite3.connect('unified_pricelists.db')
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        cursor = conn.cursor()
        cursor.execute("""
            SELECT table_name, source_sheet, row_count 
            FROM pricelists_metadata 
            WHERE source_file LIKE ?
        """, [f'%{source_file.split()[0]}%'])
        
        results = cursor.fetchall()
        
        if not results:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(results)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            
            # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            summary_data = []
            for table_name, sheet, rows in results:
                summary_data.append({
                    '–¢–∞–±–ª–∏—Ü–∞': table_name,
                    '–õ–∏—Å—Ç': sheet,
                    '–°—Ç—Ä–æ–∫': rows
                })
            
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞', index=False)
            print(f"  üìä –õ–∏—Å—Ç '–°–≤–æ–¥–∫–∞' —Å–æ–∑–¥–∞–Ω")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
            for table_name, sheet, rows in results:
                try:
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    query = f"SELECT * FROM {table_name}"
                    df = pd.read_sql_query(query, conn)
                    
                    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ª–∏—Å—Ç–∞
                    safe_sheet_name = f"{sheet[:30]}" if sheet != "CSV" else f"{table_name[:30]}"
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
                    df.to_excel(writer, sheet_name=safe_sheet_name, index=False)
                    print(f"  üìã –õ–∏—Å—Ç '{safe_sheet_name}' —Å–æ–∑–¥–∞–Ω ({rows:,} —Å—Ç—Ä–æ–∫)")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                    continue
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        import os
        file_size = os.path.getsize(output_file)
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} MB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()
    
    return True

def list_available_tables():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    conn = sqlite3.connect('unified_pricelists.db')
    
    print("üìã –î–û–°–¢–£–ü–ù–´–ï –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê:")
    print("=" * 60)
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT table_name, source_file, source_sheet, row_count, column_count
            FROM pricelists_metadata 
            ORDER BY row_count DESC
        """)
        
        for row in cursor.fetchall():
            table_name, source_file, sheet, rows, cols = row
            print(f"üîπ {table_name}")
            print(f"   üìÑ –§–∞–π–ª: {source_file}")
            print(f"   üìä –õ–∏—Å—Ç: {sheet}")
            print(f"   üìà –°—Ç—Ä–æ–∫: {rows:,}")
            print(f"   üìã –°—Ç–æ–ª–±—Ü–æ–≤: {cols}")
            print()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì§ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• –í EXCEL")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    list_available_tables()
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    print("1Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
    export_all_tables_to_excel()
    
    print("\n" + "=" * 50)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø—Ä–∏–º–µ—Ä)
    print("2Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä)...")
    export_by_source("–§–ï–†–û–ù –ø—Ä–∞–π—Å 07.08.25.csv")
    
    print("\n" + "=" * 50)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–∏–º–µ—Ä)
    print("3Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–∏–º–µ—Ä)...")
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    conn = sqlite3.connect('unified_pricelists.db')
    cursor = conn.cursor()
    cursor.execute("SELECT table_name FROM pricelists_metadata LIMIT 1")
    first_table = cursor.fetchone()
    conn.close()
    
    if first_table:
        table_name = first_table[0]
        export_specific_table(table_name)
    
    print("\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

def export_unified_table():
    """–≠–∫—Å–ø–æ—Ä—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
    try:
        conn = sqlite3.connect('unified_pricelists.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT * FROM all_pricelists ORDER BY id")
        rows = cursor.fetchall()
        
        if not rows:
            print("‚ùå –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        cursor.execute("PRAGMA table_info(all_pricelists)")
        columns_info = cursor.fetchall()
        column_names = [col[1] for col in columns_info]
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(rows, columns=column_names)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"unified_pricelists_export_{timestamp}.xlsx"
        
        print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–∞–π–ª: {filename}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df):,}")
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
            df.to_excel(writer, sheet_name='–í—Å–µ_–¥–∞–Ω–Ω—ã–µ', index=False)
            
            # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
            separators_df = df[df['section_separator'].notna()][['section_separator']].drop_duplicates()
            separators_df.to_excel(writer, sheet_name='–†–∞–∑–¥–µ–ª—ã', index=False)
            
            # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            source_stats = df[df['section_separator'].isna()].groupby(['source_file', 'sheet_name']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø–∏—Å–µ–π')
            source_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–ø–æ_–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º', index=False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(filename) / (1024 * 1024)  # MB
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª: {filename}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} MB")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")

if __name__ == "__main__":
    main()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    print("\n" + "=" * 50)
    print("4Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏...")
    export_unified_table()
