#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –±–∞–∑—ã –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
"""

import sqlite3
import pandas as pd

def view_database_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('unified_pricelists.db')
    
    print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    data_tables = [table[0] for table in tables if table[0] not in ['sqlite_sequence', 'pricelists_metadata']]
    
    print(f"–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏: {len(data_tables)}")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    print("\nüìÅ –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ü–†–ê–ô–°-–õ–ò–°–¢–û–í:")
    print("-" * 50)
    cursor.execute("""
        SELECT table_name, source_file, source_sheet, row_count, column_count, file_size_mb
        FROM pricelists_metadata 
        ORDER BY row_count DESC
    """)
    
    total_rows = 0
    for row in cursor.fetchall():
        table_name, source_file, sheet, rows, cols, size = row
        total_rows += rows
        print(f"{table_name}: {source_file} ({sheet}) - {rows:,} —Å—Ç—Ä–æ–∫, {cols} —Å—Ç–æ–ª–±—Ü–æ–≤, {size:.1f} MB")
    
    print(f"\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_rows:,}")
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüèóÔ∏è  –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print("-" * 50)
    for table_name in data_tables:
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        row_count = cursor.fetchone()[0]
        print(f"  –¢–∞–±–ª–∏—Ü–∞ {table_name}: {row_count:,} —Å—Ç—Ä–æ–∫")
    
    conn.close()

def view_table_structure(table_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    conn = sqlite3.connect('unified_pricelists.db')
    
    print(f"\nüîç –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´: {table_name}")
    print("=" * 60)
    
    try:
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        
        print("–°—Ç–æ–ª–±—Ü—ã:")
        for col in columns:
            col_name = col[1]
            col_type = col[2]
            print(f"  {col_name} ({col_type})")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        row_count = cursor.fetchone()[0]
        print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {row_count:,}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")
    finally:
        conn.close()

def view_sample_data(table_name, limit=5):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    conn = sqlite3.connect('unified_pricelists.db')
    
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• –ò–ó –¢–ê–ë–õ–ò–¶–´: {table_name}")
    print("=" * 80)
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        query = f"SELECT * FROM {table_name} LIMIT {limit}"
        df = pd.read_sql_query(query, conn)
        
        if df.empty:
            print("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
        else:
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
            print(df.to_string(index=False, max_cols=10))
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

def search_by_source(source_file, limit=5):
    """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    conn = sqlite3.connect('unified_pricelists.db')
    
    print(f"\nüîç –ü–û–ò–°–ö –ü–û –§–ê–ô–õ–£: {source_file}")
    print("=" * 80)
    
    try:
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        cursor = conn.cursor()
        cursor.execute("""
            SELECT table_name, source_sheet, row_count 
            FROM pricelists_metadata 
            WHERE source_file LIKE ?
        """, [f'%{source_file.split()[0]}%'])
        
        results = cursor.fetchall()
        
        if not results:
            print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(results)}")
        
        for table_name, sheet, rows in results:
            print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
            print(f"   –õ–∏—Å—Ç: {sheet}")
            print(f"   –°—Ç—Ä–æ–∫: {rows:,}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                query = f"SELECT * FROM {table_name} LIMIT {limit}"
                df = pd.read_sql_query(query, conn)
                
                if not df.empty:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    display_cols = ['id', 'source_row', 'processed_at']
                    data_cols = [col for col in df.columns if col not in display_cols and not col.startswith('Unnamed')]
                    display_cols.extend(data_cols[:3])  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                    
                    print(f"   –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                    print(df[display_cols].to_string(index=False, max_cols=10))
                    
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    finally:
        conn.close()

def list_all_tables():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    conn = sqlite3.connect('unified_pricelists.db')
    
    print("\nüìã –°–ü–ò–°–û–ö –í–°–ï–• –¢–ê–ë–õ–ò–¶:")
    print("=" * 60)
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT table_name, source_file, source_sheet, row_count, column_count, file_size_mb
            FROM pricelists_metadata 
            ORDER BY row_count DESC
        """)
        
        for row in cursor.fetchall():
            table_name, source_file, sheet, rows, cols, size = row
            print(f"üîπ {table_name}")
            print(f"   üìÑ –§–∞–π–ª: {source_file}")
            print(f"   üìä –õ–∏—Å—Ç: {sheet}")
            print(f"   üìà –°—Ç—Ä–æ–∫: {rows:,}")
            print(f"   üìã –°—Ç–æ–ª–±—Ü–æ–≤: {cols}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä: {size:.1f} MB")
            print()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–°–ú–û–¢–† –ë–ê–ó–´ –î–ê–ù–ù–´–• –ü–†–ê–ô–°-–õ–ò–°–¢–û–í")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    view_database_info()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    list_all_tables()
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    print("=" * 60)
    print("üîç –ü–†–ò–ú–ï–† –ü–†–û–°–ú–û–¢–†–ê –ö–û–ù–ö–†–ï–¢–ù–û–ô –¢–ê–ë–õ–ò–¶–´:")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    conn = sqlite3.connect('unified_pricelists.db')
    cursor = conn.cursor()
    cursor.execute("SELECT table_name FROM pricelists_metadata LIMIT 1")
    first_table = cursor.fetchone()
    conn.close()
    
    if first_table:
        table_name = first_table[0]
        view_table_structure(table_name)
        view_sample_data(table_name, 3)
    
    # –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É
    print("\n" + "=" * 60)
    search_by_source("–§–ï–†–û–ù –ø—Ä–∞–π—Å 07.08.25.csv", 3)

if __name__ == "__main__":
    main()
